#include <stdio.h>
#include <cuda_runtime_api.h>

/******************************************************************************
  This program adds two arrays of integers together and stores the results in
  another array. As the arrays are quite big special care needs to be taken
  to ensure the number of threads per block is not exceeded. We need to use
  the block dimensions to work out the unique index of each thread so that it
  knows which item of data to operate on.
  
  Compile with:
    nvcc -o 06 06.cu
  
  Dr Kevan Buckley, University of Wolverhampton, 2018
******************************************************************************/

int h_a[]=
{215,100,200,204,233,50,85,196,71,141,122,160,93,131,243,234,162,183,36,155,4,62,
35,205,40,102,33,27,255,55,131,214,156,75,163,134,126,249,74,197,134,197,102,
228,72,90,206,235,17,243,134,22,49,169,227,89,16,5,117,16,60,248,230,217,68,138,
96,194,131,170,136,10,112,238,238,184,72,189,163,90,176,42,112,225,212,84,58,
228,89,175,244,150,168,219,112,236,101,208,175,233,123,55,243,235,37,225,164,
110,158,71,201,78,114,57,48,70,142,106,43,232,26,32,126,194,252,239,175,98,191,
94,75,59,149,62,39,187,32,203,42,190,19,243,13,133,45,61,204,187,168,247,163,
194,23,34,133,20,17,52,118,209,146,193,13,40,255,52,227,32,255,13,222,18,1,236,
152,46,41,100,233,209,91,141,148,115,175,25,135,193,77,254,147,224,191,161,9,
191,213,236,223,212,250,190,231,251,170,127,41,212,227,19,166,63,161,58,179,81,
84,59,18,162,57,166,130,248,71,139,184,28,120,151,241,115,86,217,111,0,88,153,
213,59,172,123,123,78,182,46,159,10,105,178,172,163,88,47,155,160,187,84,189,51,
235,175,167,65,136,22,66,224,175,23,28,92,147,151,170,73,198,73,84,48,251,0,211,
84,48,111,245,235,195,178,31,175,98,198,241,234,220,52,203,140,76,231,232,223,
127,147,41,70,221,126,118,217,126,74,46,175,186,35,154,126,214,185,45,56,127,31,
35,92,83,238,232,159,214,209,126,85,100,168,155,66,38,18,27,165,93,73,84,23,109,
239,149,67,168,195,124,40,226,160,132,53,142,109,212,100,62,83,186,163,252,86,
229,34,105,1,200,198,75,29,221,184,12,114,252,181,53,121,221,24,25,98,77,168,
207,33,13,13,117,199,177,113,30,150,148,135,152,92,77,227,122,43,156,134,158,
152,59,212,17,25,236,43,123,57,211,74,91,224,88,208,168,9,65,199,160,214,78,56,
50,156,28,172,200,184,51,102,80,111,59,98,136,39,142,3,97,97,78,188,66,166,141,
235,175,207,178,79,165,1,136,216,158,164,132,102,92,184,205,173,39,8,16,175,48,
158,179,145,0,1,78,66,167,219,46,87,170,225,167,80,226,47,40,128,212,172,231,48,
100,180,222,140,189,238,59,237,141,238,126,141,240,204,208,152,168,254,239,83,
223,150,163,194,198,203,67,154,120,42,203,221,223,170,105,156,152,165,137,37,
148,8,179,132,213,131,28,125,130,12,208,98,163,115,36,105,63,104,4,183,146,208,
149,114,122,254,15,19,164,152,56,56,161,236,188,118,112,217,243,242,230,196,85,
137,56,122,243,119,226,247,47,117,199,196,231,65,194,246,84,103,143,141,159,48,
122,92,167,234,53,155,221,28,95,50,165,151,173,152,15,143,144,62,4,88,2,236,153,
197,227,238,44,114,124,203,163,247,39,74,225,93,230,191,121,69,242,31,221,159,
183,236,47,72,42,51,160,45,32,58,242,3,41,30,118,166,234,25,157,18,100,127,111,
75,62,233,144,48,8,110,208,192,91,255,9,134,51,169,179,83,227,165,87,12,196,205,
178,174,231,80,192,76,207,48,151,13,25,40,62,34,150,14,227,242,14,236,120,65,
150,43,149,121,208,237,134,149,186,57,67,162,137,4,238,88,52,133,102,78,174,165,
113,68,180,85,54,194,66,174,4,216,218,153,82,170,134,217,64,65,18,131,227,156,
135,210,245,188,88,92,11,6,1,124,74,181,209,129,119,20,48,123,236,11,21,62,182,
156,23,246,222,42,121,193,199,1,148,188,190,236,24,201,242,25,70,61,207,24,191,
70,44,240,194,24,251,216,87,177,116,111,167,82,153,33,20,96,35,168,29,225,149,
53,171,135,79,241,196,31,9,131,102,54,115,41,78,111,1,166,32,118,21,199,201,175,
233,222,16,12,134,45,237,28,99,152,163,179,138,104,210,147,235,56,202,95,97,24,
206,99,191,239,217,212,182,162,132,159,128,148,171,7,193,153,35,36,50,199,216,
188,47,170,80,27,227,26,122,69,51,73,168,242,56,129,199,239,36,75,143,164,223,
59,172,161,213,208,197,7,151,158,195,198,72,19,225,44,45,92,113,96,165,25,83,
222,155,26,206,191,102,93,100,69,153,17,230,110,225,172,117,120,74,57,62,147,77,
32,191,122,124,49,219,34,75,47,0,230,73,207,166,176,44,11,245,198,28,220,53,254,
137,170,119,212,228,182,103,49,214,39,172,82,88,136,117,163,183,117,138,1,68,49,
177,113,60,167,56,89,131,109,87,12,24,207,225,252,133,72,46,91,112,218,174,201,
98,35,109,26,153,247,27,222,40,205,80,101,116,136,190,248,245,22,5,13,229,230,
10,107,47,56,199,159,18,118,104,117,154,213,144,51,205,172,18,246,121,98,91,238,
234,26,230,224,49,235,237,22,210,247,130,1,48,73,160,67,191,9,184,89,223,72,141,
172,245,159,163,110,2,254,93,236,25,67,205,74,47,186,97,1,178,227,2,226,45,163,
37,236,172,222,70,140,39,212,57,28,115,220,139,118,219,232,98,244,44,48,63,92,
234,160,93,157,132,96,128,177,4,166,158,177,133,229,61,172,185,118,201,45,83,85,
163,46,62,6,35,106,54,98,199,33,3,37,190,135,134,63,57,138,229,216,60,106,189,
122,23,118,240,225,163,68,54,71,114,117,77,150,224,131,248,167,164,252,204,99,
131,82,162,189,221,136,149,25,243,82,147,11,201,132,236,109,200,35,180,59,152,2,
209,121,133,202,32,42,198,236,142,74,63,49,8,28,186,157,54,173,240,201,184,186,
78,165,39,23,200,220,82,97,222,36,218,99,238,251,142,181,232,29,0,39,78,8,68,8,
165,122,182,150,68,111,80,146,20,119,169,221,83,252,63,49,32,25,149,15,21,36,
196,253,65,196,36,144,204,105,153,114,227,79,9,40,191,89,187,211,209,100,177,37,
97,240,87,129,10,236,145,31,17,86,28,82,27,65,227,232,171,124,90,143,204,100,
183,140,189,114,95,142,215,17,180,56,1,11,186,11,248,75,43,9,162,72,92,189,137,
63,165,52,188,0,195,137,100,123,21,34,237,117,177,196,134,101,253,136,112,183,
148,104,3,191,113,165,7,206,99,145,14,8,198,202,9,138,84,109,5,105,144,242,223,
65,183,102,166,180,238,22,108,131,127,112,67,241,22,74,191,121,220,205,130,162,
152,139,44,237,249,50,87,137,36,54,202,220,156,113,145,139,136,254,15,7,110,82,
249,132,156,184,254,121,134,128,27,31,11,72,12,5,122,99,142,159,154,89,124,55,
203,13,195,83,12,210,91,122,36,84,255,193,13,254,58,148,126,86,179,138,159,192,
143,26,36,30};

int h_b[] = 
{179,207,22,31,89,108,179,16,150,164,253,75,69,17,243,97,82,253,215,70,152,142,
217,47,101,227,217,81,26,11,165,205,218,187,236,51,39,160,68,190,68,66,9,138,84,
253,235,166,250,195,237,146,82,198,194,183,170,155,9,196,167,174,146,130,106,
127,182,146,31,250,80,100,61,90,238,145,87,218,56,81,157,38,228,239,236,166,167,
151,66,176,91,233,95,238,107,201,109,33,91,141,28,171,241,90,5,223,235,93,185,
36,174,87,75,146,71,55,57,238,206,123,159,42,101,255,24,208,200,134,242,35,19,
14,207,4,104,213,227,84,50,157,121,225,244,196,116,59,252,173,42,203,41,202,245,
142,201,14,94,146,149,80,181,168,95,133,173,200,90,145,29,141,46,151,110,35,91,
226,95,88,144,137,35,185,84,25,71,30,40,166,176,189,246,102,101,86,235,19,31,70,
164,60,211,210,212,66,245,47,37,84,135,181,222,171,110,51,196,182,81,236,92,1,
169,83,104,15,169,83,34,201,154,199,6,110,153,218,176,143,9,213,228,145,138,195,
60,249,246,1,175,72,238,11,74,151,94,178,167,8,6,202,209,160,145,215,14,43,177,
190,187,187,148,160,77,30,99,138,24,90,139,199,162,121,211,236,17,50,159,185,58,
165,132,12,69,22,228,84,66,150,18,253,82,167,158,159,198,2,42,222,92,181,166,
255,47,121,236,65,171,139,250,230,48,127,242,118,149,215,202,215,109,221,213,
191,132,115,94,74,117,136,41,210,62,207,210,110,73,191,175,245,74,170,219,123,
41,206,242,190,165,189,150,18,154,107,210,31,223,49,106,84,186,147,39,249,99,
250,103,172,185,23,161,4,194,125,127,235,76,114,170,241,47,65,4,202,172,215,233,
139,8,84,224,194,232,8,187,75,2,35,248,187,58,154,191,252,24,63,232,100,177,147,
86,224,212,90,170,129,49,148,13,58,233,237,252,209,246,184,29,248,219,21,180,22,
176,115,19,200,179,251,44,101,143,130,69,100,221,240,229,15,133,243,73,110,224,
70,64,214,254,93,207,218,115,131,240,35,247,3,236,170,255,24,15,143,155,85,243,
120,70,217,136,203,204,209,58,173,23,123,131,22,216,83,240,76,214,225,112,205,
229,92,120,228,117,135,115,17,221,103,137,35,64,18,239,12,227,42,185,251,165,61,
18,126,144,2,202,103,228,58,53,201,151,173,174,12,53,34,29,18,137,167,54,201,
185,38,214,157,80,144,152,245,206,170,116,95,173,62,198,146,121,251,91,16,168,
10,28,222,44,58,240,181,226,39,127,155,77,86,56,157,230,209,147,180,124,7,19,42,
70,218,188,191,213,24,207,126,34,236,92,79,39,77,4,9,116,132,164,194,218,221,95,
192,175,243,117,44,251,136,86,65,98,19,1,56,43,209,182,78,189,19,157,228,96,162,
237,213,38,146,151,0,112,247,193,31,235,54,75,230,191,161,40,34,181,41,90,224,
250,17,47,184,36,204,157,133,110,138,91,149,29,243,149,141,234,86,172,213,141,
248,188,76,154,229,110,79,14,201,48,9,218,95,194,255,44,95,133,155,234,225,48,7,
212,197,149,191,28,65,149,169,58,81,246,212,54,100,36,69,45,84,79,8,180,17,8,
224,112,141,123,91,111,171,98,67,113,247,2,142,57,151,55,116,233,45,72,31,146,
109,101,192,193,180,201,118,197,209,86,54,95,210,145,206,126,244,18,239,236,20,
125,38,172,181,154,150,227,227,182,118,80,27,54,18,207,255,136,149,209,223,204,
48,177,94,255,48,83,17,31,63,38,157,102,211,83,0,105,54,228,31,172,53,58,227,72,
10,227,209,160,180,176,109,229,98,203,229,146,30,246,178,94,29,79,196,240,163,
197,90,217,169,121,134,223,180,105,39,191,76,248,96,1,169,205,231,11,152,204,
158,183,194,80,21,224,160,217,209,67,159,43,29,72,165,163,39,89,13,79,25,90,72,
121,91,241,70,66,253,223,14,155,150,209,236,172,177,141,134,130,208,37,174,238,
110,83,145,150,173,159,229,198,249,45,63,85,30,134,152,28,101,167,183,252,121,
164,169,42,49,47,173,2,85,92,240,195,175,130,89,92,33,62,34,27,108,98,112,139,
232,9,167,77,176,95,74,41,3,243,84,53,35,2,55,120,94,40,59,13,170,148,106,203,
211,140,231,63,238,88,202,215,97,114,36,17,210,111,59,213,98,144,11,134,146,67,
254,240,107,57,254,21,205,104,225,161,245,200,224,228,32,171,187,129,30,224,147,
240,79,207,198,178,95,209,56,242,20,54,227,127,111,225,149,61,74,118,223,63,62,
191,35,95,107,222,225,137,191,117,122,14,68,64,192,164,18,249,150,38,48,121,166,
159,91,59,221,166,178,188,229,241,124,9,80,232,232,50,114,167,167,236,182,236,
45,119,144,63,112,39,102,160,160,12,64,252,72,30,162,250,219,136,235,88,146,60,
64,123,110,179,34,21,159,216,1,205,80,146,12,192,185,114,97,90,127,161,87,199,
192,249,193,155,130,172,243,20,232,52,143,86,231,178,108,135,139,110,84,219,0,
96,156,185,211,253,20,82,159,107,25,95,100,218,251,231,135,239,252,112,35,140,
199,10,62,51,145,202,162,230,165,162,70,66,92,26,63,112,108,223,219,133,63,64,
96,58,40,232,42,36,88,77,176,32,88,239,84,233,185,246,208,95,153,23,161,245,49,
225,102,157,192,65,35,0,130,132,59,170,109,101,206,198,178,127,230,10,110,58,
244,40,49,196,136,202,219,41,192,12,11,38,170,204,104,206,204,234,83,7,149,192,
108,100,134,31,227,108,41,82,167,29,122,217,226,2,163,189,44,99,202,56,138,117,
4,242,67,208,220,151,216,113,87,69,213,221,100,185,74,141,11,242,171,134,203,
142,137,110,76,182,210,23,238,92,140,243,78,208,196,43,103,156,156,190,225,114,
156,70,44,231,212,55,217,127,190,164,14,71,19,90,254,229,113,236,66,254,223,145,
206,163,188,54,64,89,245,34,203,145,104,247,120,60,47,82,188,237,246,202,53,9,
36,51,239,150,32,49,148,0,194,98,163,126,153,228,216,142,6,164,32,110,156,153,
171,203,235,103,185,225,49,239,235,86,35,218,237,67,12,129,67,206,228,231,77,
125,203,38,11,210,202,44,65,102,197,236,50,176,84,235,145,134,219,124,220,254,
87,202,65,99,75,133,50,48,108,128,173,56,166,185,10,112,229,76,215,170,57,9,91,
141,245,237,19,208,105,240,206,193,186,15,36,6,149,87,54,1,215,227,58,126,157,
69,239,131,145,198,46,202,208,137,88,197,118,107,150,224,91,100,161,22,116,198,
28,9,29,82,11,245,54,69,116,211,139,99,86};           
int h_c[1500];   

int *d_a, *d_b, *d_c;        
           
__global__ void kernel(int *a, int *b, int *c){
  int i = (blockIdx.x * 150) + threadIdx.x;
  c[i] = a[i] + b[i];
}

int main() {
  cudaError_t error;

  error = cudaMalloc(&d_a, sizeof(int) * 1500);
  if(error){
    fprintf(stderr, "cudaMalloc on d_a returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }

  error = cudaMalloc(&d_b, sizeof(int) * 1500);
  if(error){
    fprintf(stderr, "cudaMalloc on d_b returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }

  error = cudaMalloc(&d_c, sizeof(int) * 1500);
  if(error){
    fprintf(stderr, "cudaMalloc on d_c returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }

  error = cudaMemcpy(d_a, &h_a, sizeof(int) * 1500, cudaMemcpyHostToDevice);
  if(error){
    fprintf(stderr, "cudaMemcpy to d_b returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }  

  error = cudaMemcpy(d_b, &h_b, sizeof(int) * 1500, cudaMemcpyHostToDevice);
  if(error){
    fprintf(stderr, "cudaMemcpy to d_b returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }

  kernel <<<10,150>>>(d_a, d_b, d_c);
  error = cudaGetLastError();
  if(error){
    fprintf(stderr, "Kernel launch returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }
  cudaThreadSynchronize();

  error = cudaMemcpy(h_c, d_c, sizeof(int) * 1500, cudaMemcpyDeviceToHost);  
  if(error){
    fprintf(stderr, "cudaMemcpy to h_c returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }

  error = cudaFree(d_a);
  if(error){
    fprintf(stderr, "cudaFree on d_a returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }

  error = cudaFree(d_b);
  if(error){
    fprintf(stderr, "cudaFree on d_b returned %d %s\n", error,
      cudaGetErrorString(error));
    exit(1);
  }

  error = cudaFree(d_c);
  if(error){
    fprintf(stderr, "cudaFree on d_c returned %d %s\n", error,
      cudaGetErrorString(error));;
    exit(1);
  }

  int i;
  for(i=0;i<1500;i++){
    printf("%-4d %-3d + %-3d = %-4d\n", i, h_a[i], h_b[i], h_c[i]);
  }  
  return 0;
}

